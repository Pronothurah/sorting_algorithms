// int *partition(int *begin, int *end)
// {
// 	int *low  = begin;

// 	int *high = end;

// 	int *pivot = low + (high - low)/2;

// 	while (true)
// 	{
// 		while (*low < pivot)
// 			++low;
// 		do {
// 			--high;
// 		} while (pivot < *high);

// 		if (low >= high)
// 		{
// 			return (low);
// 		}

// 		swap(low, high);

// 		++low;
// 	}
// }

// void qsort(int *begin, int *end)
// {
// 	int *p;

// 	if (end - begin < 2)
// 		return;

// 	p = partition(begin, end);

// 	qsort(begin, p);
// 	qsort(p, end);
// }


int *high = end - 1;

	int pivot = *high;

	int *i = begin;

	int *j;

	for (j = begin; j < high; ++j)
	{

		if (*j <= pivot)
		{
			swap(i, j);
			++i;
		}
	}

	swap(i + 1, high);

	return (i + 1);


void shellSort(T a[], int n)
{
	int incr = n / 2;

	while (incr >= 1)
	{
		for (int i = incr; i < a.length; i++)

		{
		T insertElement = a[i];
		int j;

		for (j = i - incr;
				j >= 0 && insertElement < a[j];
				j -= incr)
			a[j + incr] = a[j];
		a[j + incr] = insertElement;
		}

		if (incr == 2)
		incr = 1;
		else
		incr = (int) (incr / 2.2);
	}
}

size_t lomuto_partition(int *array, size_t size, ssize_t begin, ssize_t end)
{
	int i, j, pivot = array[end];

	for (i = j = begin; j < end; j++)
	{
		if (array[j] < pivot)
		{
			swap(array, size, &array[j], &array[i++]);
		}
		swap(array, size, &array[i], &array[end]);
	}

	return (i);
}

/**
* swap - swaps two integers
* @array: input array
* @size: size of array
* @a: first int
* @b: second int
*/
void swap(int *array, size_t size, int *a, int *b)
{
	int temp;

	if (a != b)
	{
		printf("Before swapping:\n");
		print_array((const int *)array, size);
		/*use temp  value to hold value*/
		temp = *a;
		/*asign b to a*/
		*a = *b;
		/*asign temp to b*/
		*b = temp;
		printf("After swapping:\n");
		print_array((const int *)array, size);
	}
}
